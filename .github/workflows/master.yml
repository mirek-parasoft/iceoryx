name: Build and run

on:
  # Triggers the workflow on push or pull request events but only for the master (main) branch.
  push:
    branches: [ master, main ]

env:
  BUILD_TYPE: Release
  BUILD_ID: build_3
  LINE_COV_GATE: 100
  MCDC_COV_GATE: 95
  
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted
    continue-on-error: true
     # Specifies required permissions for upload-sarif action
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: write
      contents: write
      pages: write
      id-token: write

    steps:
    - uses: actions/checkout@v2

    - name: Set build id
      shell: bash
      working-directory: ${{github.workspace}}
      run: echo "build_id=build-$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV 

    - name: Echo build id
      shell: bash
      working-directory: ${{github.workspace}}
      run: echo "The new build id is ${{ env.build_id }}"
  
    - name: Build project 
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: bazel run @cpptest//:coverage --@cpptest//:target=//iceoryx_hoofs/test:hoofs_moduletests_vector  --@cpptest//:psrc_file=//:cpptestcc-bazel-psrc

    - name: Coverage Logs Cleanup
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: rm -f cpptest_results.clog

    - name: Run Unit Tests
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: bazel-out/k8-fastbuild/bin/iceoryx_hoofs/test/hoofs_moduletests_vector.elf --gtest_output=xml

    - name: Compute results
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cpptestcov compute -map .cpptest -clog cpptest_results.clog -out .coverage

    - name: Generate reports
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cpptestcov report html -code -coverage LC,MCDC -out report/coverage.html .coverage

    - name: Rename Coverage Report
      working-directory: ${{github.workspace}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: ls -la
    - name: Setup Pages
      uses: actions/configure-pages@v3
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload entire repository
        path: ${{github.workspace}}/report
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Archive Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          ${{github.workspace}}/.coverage/*

    - name: Report to DTP
      working-directory: ${{github.workspace}}
      shell: bash
      run: cpptestcov report dtp -verbose -coverage LC,MCDC -settings dtp.settings test_detail.xml .coverage

    - name: Check Line Quality Gate
      working-directory: ${{github.workspace}}
      shell: bash
      run: COV_VALUE=$(cpptestcov query -coverage LC .coverage) && if [ $COV_VALUE -lt $LINE_COV_GATE ]; then echo "Line quality gate failed"; echo "Expected $LINE_COV_GATE% achieved $COV_VALUE%"; echo "Check details in html report https://mirek-parasoft.github.io/iceoryx/coverage.html"; false; else echo "Passed"; true; fi
      

